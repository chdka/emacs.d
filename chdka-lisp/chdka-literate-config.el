;;; chdka-literate-config.el --- -*- lexical-binding: t -*-

;; Copyright (C) 2018-2021  Christian Dijkstra <chdka@public-files.de>

;; Author: Christian Dijkstra <chdka@public-files.de>
;; URL:
;; Version: 0.1
;; Package-Requires: ((emacs "27.1")) ((org))

;; This file is not part of Emacs

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Except otherwise noted. For example, I derive some functions from
;; Holger Schurig which are licensed under GPLv2.
;; [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html]

;;; Description:

;; This package enables to use a literate configuration in a convenient
;; way. It tangles a <config>.org file to <config>.el and loads the result.
;;
;; When a heading has the DISABLED state, the including sourcecode block do
;; not get tangled.
;;
;; When a sourcecode block has the option ":tangle no" it also is ignored
;; during tangling of the file
;;

;;; TODO

;; Currently when a heading has a DISABLED state, and a subheading contains
;; a sourcecode block, this block gets tangled.
;;

;;; Code:
(defvar chdka-lc--date-time-format "%a %b %Y-%m-%d %H:%M:%S "
  "Format of date to insert with 'insert-current-date-time' func
See help of 'format-time-string' possible replacements")

(defvar chdka-lc--current-time-format "%a %H:%M:%S"
  "Format of time to insert with 'insert-current-time' func")

(defun chdka-lc-tangle-config-file (orgfile elfile)
  "This function will write all source blocks from =orgfile= into =elfile= that are ...

- not marked as =tangle: no=
- doesn't have the TODO state =DISABLED=
- have a source-code of =emacs-lisp=

LICENSE GPLv2 [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html]
See [https://bitbucket.org/holgerschurig/emacsconf/src/a8b0e77a1ac071b9c9f2558ff6d546acc912d5dd/init.el?at=master]
"
  (require 'org)
  (let* ((body-list ())
	 (output-file elfile)
	 (org-babel-default-header-args (org-babel-merge-params
					 org-babel-default-header-args
					 (list (cons :tangle output-file)))))
    (message "_chdka-lc-tangle-config-file___. re-generating %s ..." output-file)
    (save-restriction
      (save-excursion
	(org-babel-map-src-blocks orgfile
	 (let* (
		(org_block_info (org-babel-get-src-block-info 'light))
		(tfile (cdr (assq :tangle (nth 2 org_block_info))))
		(match_for_TODO_keyword)
		)
	   (save-excursion
	     (catch 'exit
	       (org-back-to-heading t)
	       (when (looking-at org-outline-regexp)
		 (goto-char (1- (match-end 0))))
	       (when (looking-at (concat " +" org-todo-regexp "\\( +\\|[ \t]*$\\)"))
		 (setq match_for_TODO_keyword (match-string 1)))))
	   (unless (or (string= "no" tfile)
		       (string= "DISABLED" match_for_TODO_keyword)
		       (not (string= "emacs-lisp" lang)))
	     (cl-pushnew (concat "\n\n;; =====\n"
					     "(message \"" (file-name-nondirectory orgfile) " @" (org-get-heading) "..\")\n\n"
					     ";; ----\n\n") body-list)
	     (cl-pushnew body body-list))))
	)
      (with-temp-file output-file
	(insert ";; -*- lexical-binding: t -*-\n")
        (insert ";; =============================================================================\n")
        (insert ";;  don't edit this file\n")
	(insert ";;   edit [" orgfile "] instead ..\n" )
        (insert ";;  auto-generated by chdka-lc-tangle-config-file\n")
	(insert ";;   at  : " (format-time-string chdka-lc--date-time-format (current-time)) "\n")
	(insert ";;   host: " (system-name) "\n")
        (insert ";; =============================================================================\n\n")
        (insert (apply 'concat (reverse body-list))))
      (message "_chdka-lc-tangle-config-file___. wrote %s" output-file)
      (unload-feature 'org t)
      )))

(defun chdka-lc-load-config-file (fname)
  "Loads an elisp file or =fname.el= when a newer =fname.org= exists it will
be first tangled.

Activate via adding the following to init.el
(chdka-lc-load-org-file <fname>)

LICENSE GPLv2 [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html]
See [https://bitbucket.org/holgerschurig/emacsconf/src/a8b0e77a1ac071b9c9f2558ff6d546acc912d5dd/init.el?at=master]
"
  (let* (;; disable garbage collection
	 (gc-cons-threshold most-positive-fixnum)
	 ;; strip extension from fname
	 (sansfile (expand-file-name (file-name-sans-extension fname) user-emacs-directory))
	 (orgfile (concat sansfile ".org"))
	 (elfile  (concat sansfile ".el")))
    (when (file-exists-p orgfile)
      (when (or (not (file-exists-p elfile))
		(file-newer-than-file-p orgfile elfile))
	(chdka-lc-tangle-config-file orgfile elfile)))
    (message "_chdka-lc-load-config-file___. loading %s" elfile)
    (load elfile nil 'nomessage)))
	 

(provide 'chdka-literate-config)
;;; chdka-literate-config.el ends here
