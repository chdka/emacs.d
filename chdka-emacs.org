#+title: My Literate Emacs Configuration
#+author: Christian Dijkstra
#+email: chdka@public-files.de
#+startup: noptag indent content
#+options: ^:nil
#+exclude_tags: noexport
#+todo: DISABLED(d) | ENABLED(e)
#+todo: BUG(b) FEATURE(f) | FIXED(x)
#+tags: @behaviour(b) @ui(u) env_var(v) keymapping(k) hook(h)
#+tags: { issue(i) feature(f) }
#+property: header-args :results silent

* LICENSE
I've chosen GPLv3, because most of the information and snippets I use are also licensed under GPLv3.

#+begin_src emacs-lisp

;; Copyright (C) 2021
;; Christian Dijkstra <chdka@public-files.de>

;; Author: Christian Dijkstra <chdka@public-files.de>
;; Package-requires: ((emacs "27.1"))

;; This file is part of my Emacs configuration

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

#+end_src

* Introduction
This is /My Literate Emacs Configuration/.
It is build upon snippets I've found on the web and my personal preference for the functionality of things.

** Needed elisp file
To use this literate configuration I've created a set of elisp functions defined in:

#+include: "~/.config/emacs/chdka-lisp/chdka-literate-config.el" src emacs-lisp :tangle no

This file is part of this repository.

** Usage of the TODO keywords
I've defined two sets of keywords

- DISABLED | ENABLED :: When the value is *DISABLED*, this heading is not tangled / exported to the =chdka-emacs.el= file. Currently there is an issue with this keyword
- BUG FEATURE | FIXED :: When a heading is set to *BUG*, *FEATURE* it is an indicator something has to be corrected, but at this moment I do not know how exactly.

** Usage of the TAGS
I've define a set of tags, which are a controlled vocabulari in this file.
Following is a description of the tags and the meaning for them.

- @behaviour :: the setting here has an effect on the functionality, but is not necessarily visual. e.g. the setting for auto-revert-mode
- @ui :: the setting here has an effect on the user interface, but is not directly a functionality change. e.g. blinking of the cursor
- env_var :: the setting here reads an environment variable which is defined outside of Emacs
- keymapping :: the setting here defines a key mapping
- hook :: the setting here defines a hook

The following list is a mutual exclusive list, meaning only one can be selected via the chords =C-c C-q= or =C-c C-c=
- issue :: this indicates an issue which needs to be resolved
- feature :: this is a feature request, e.g. implement / add a package

* Known issues and needed features for this configuration
This section is a summary of known issues and feature requests for this configuration.

** BUG The *DISABLED* state is not inherited to the subheadings :@behaviour:issue:
Currently there is an issue, when a heading has a *DISABLED* state the subheading is still processed, a workaround for this is to add =:tangle no= to the sourcecode block.
This has to be resolved in the function =chdka-lc-tangle-config-file=.

** FIXED Make it possible for a distinction between *WORK* and *PERSONAL* device :env_var:feature:
My agenda functionality is different for my *PERSONAL* environment vs my *WORK* environment.

#+begin_src emacs-lisp :tangle no
(getenv "CHDKA_DEVICE")
#+end_src


** FEATURE Clean up some obsolete environment variables [0/2]      :env_var:
One of those variables is =CHDKA_HOME_CONFIG_EMACS=. Now I use the =XDG_CONFIG_HOME= setting.
This is possible since Emacs 27.1

- [ ] CHDKA_HOME_CONFIG_EMACS
- [ ] CHDKA_HOME_USER
  
** FIXED Rename large =txt= file to other extension                :feature:
When using deft, it scans all files defined in =deft-extensions=.
I'll like to include =txt= files also, due to large exports on my work system they hog the initial starting of deft and do not
give knowledge, only information.

- [X] rename =txt= files to =tsv= (tab separated files)  or =csv= (comma separated files)
  
** FEATURE Add a tangle hook for my literate configuration    :hook:feature:
Add a =hook= when a literate confige file is saved, it gets automatically tangled.
Even an option to disable this

* /My Literate Configuration/ starts here
Set some defaults prior loading other packages and initialisations.

** Specific settings in MS Windows

*** Map =CAPSLOCK= as an extra =CTRL= key                      :@behaviour:
I've mapped my =CAPSLOCK= as an extra =CTRL= key.
This is implemented via an registry setting described as below

#+begin_example
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00

;;  explanation of the codes
;
;  Windows Registry Editor Version 5.00
;
; The hex data is in five groups of four bytes:
;   00,00,00,00,\    header version (always 00000000)
;   00,00,00,00,\    header flags (always 00000000)
;   04,00,00,00,\    # of entries (3 in this case) plus a NULL terminator line.
;                    Entries are in 2-byte pairs: Key code to send & keyboard key to send it.
;                    Each entry is in LSB, MSB order.
;   1d,00,3a,00,\    Send LEFT CTRL (0x001d) code when user presses the CAPS LOCK key (0x003a) 
;   38,00,1d,00,\    Send LEFT ALT (0x0038) code when user presses the LEFT CTRL key (0x001d) 
;   3a,00,38,00,\    Send CAPS LOCK (0x3A) code when user presses the LEFT ALT key (0x0038) 
;   00,00,00,00      NULL terminator

;[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
;"Scancode Map"=hex:00,00,00,00,\
;                   00,00,00,00,\
;                   04,00,00,00,\
;                   1d,00,3a,00,\
;                   38,00,1d,00,\
;                   3a,00,38,00,\
;                   00,00,00,00
#+end_example

** Default system-wide settings in Emacs
In this section some simple default settings which are system-wide for the emacs configuration

*** Set file and path constants based on environment variables    :env_var:
I have defined several environment variables on my personal system en work system.
These variables are used to define files and paths, and to prevent personal information
leaking from my configuration. e.g. username, computername etc.

The naming convention is a prefix with =chdka-emacs--env-=.

#+begin_src emacs-lisp

(defconst chdka-emacs--env-device (getenv "CHDKA_DEVICE")
   "Indicates if this device is my own device or work")

(defconst chdka-emacs--env-emacs-home-beorg (expand-file-name (getenv "CHDKA_APP_EMACS_HOME_BEORG"))
   "This the path to my files used via the iOS app Beorg")

(defconst chdka-emacs--env-emacs-home-org (expand-file-name (getenv "CHDKA_APP_EMACS_HOME_ORG"))
   "This is the path to my folder where i store my org files")

(defconst chdka-emacs--env-home-cache (expand-file-name (getenv "CHDKA_HOME_CACHE"))
   "This path is my equivalent of XDG_CACHE_HOME")

(defconst chdka-emacs--env-home-config (expand-file-name (getenv "CHDKA_HOME_CONFIG"))
   "This path is my equivalent of XDG_CONFIG_HOME")

(defconst chdka-emacs--env-home-config-emacs (expand-file-name (getenv "CHDKA_HOME_CONFIG_EMACS"))
   "This path points to the location where my emacs configuration is stored [DEPRECATED]")

(defconst chdka-emacs--env-home-data (expand-file-name (getenv "CHDKA_HOME_DATA"))
   "This path points to the location where my data is stored e.g. FireFox profile")

(defconst chdka-emacs--env-home-logs (expand-file-name (getenv "CHDKA_HOME_LOGS"))
   "This path points to the location where logs are stored of my personal scripts")

(defconst chdka-emacs--env-home-projects (expand-file-name (getenv "CHDKA_HOME_PROJECTS"))
   "This path points to the location where my programming projects are stored")

(defconst chdka-emacs--env-home-user (expand-file-name (getenv "CHDKA_HOME_USER"))
   "This path points to 'HOME' [DEPRECATED]")

(defconst chdka-emacs--env-xdg-cache-home  (expand-file-name (getenv "XDG_CACHE_HOME")))
(defconst chdka-emacs--env-xdg-config-home (expand-file-name (getenv "XDG_CONFIG_HOME")))
(defconst chdka-emacs--env-xdg-data-home   (expand-file-name (getenv "XDG_DATA_HOME")))
(defconst chdka-emacs--env-emacs-server-file (expand-file-name (getenv "EMACS_SERVER_FILE")))

#+end_src


*** Set constant if device is my *OWN* or *WORK*                  :env_var:
For this purpose I've created an environment variable =CHDKA_DEVICE= which holds the following values:
- OWN :: this is my personal device / computer / laptop
- WORK :: this is my work laptop

#+begin_src emacs-lisp
(defconst chdka-emacs--const-is-own-device
  (string-suffix-p "OWN" chdka-emacs--env-device t)
  "This pseudo constant indicates if my current configuration is running on my personal device,
or if it is running on my work device")
#+end_src


*** Confirm before exiting                                     :@behaviour:

#+begin_src emacs-lisp
(setq-default confirm-kill-emacs 'yes-or-no-p)
#+end_src


*** Set an alias to y/n                                        :@behaviour:
Enable y/n instead of yes/no

#+begin_src emacs-lisp
;; fset is used vs defalias, fset is global where defalias registered to the loaded file
;; lisp file
;; - [https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Functions.html]
;; - [https://www.reddit.com/r/emacs/comments/4fzgdn/what_difference_there_is_between_defalias_and_fset/]
(fset 'yes-or-no-p 'y-or-n-p) 
#+end_src

*** Customization in its own file                              :@behaviour:
Write customization into its own file

#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name "chdka-custom.el" user-emacs-directory))
#+end_src

And load this file

#+begin_src emacs-lisp
(when (file-exists-p custom-file)
  (load custom-file t))
#+end_src

*** Backup and Auto-save settings

**** Assign a backup and auto-save folder                     :@behaviour:
Stop Emacs littering all my folders with backup files and auto-save files.
Assign a folder for them, and use a flat structure

#+begin_src emacs-lisp
(defconst chdka-emacs-const-backup-rootdir 
          (expand-file-name (concat chdka-emacs--env-home-cache "/emacs/backup/"))
  "Personal Emacs backup root.")

(if (not (file-exists-p chdka-emacs-const-backup-rootdir))
    (make-directory chdka-emacs-const-backup-rootdir t))
(setq-default backup-directory-alist 
              `((".*" . ,chdka-emacs-const-backup-rootdir)))
#+end_src

#+begin_src emacs-lisp
(defconst chdka-emacs-const-autosave-rootdir
          (expand-file-name (concat chdka-emacs--env-home-cache "/emacs/auto-save/"))
  "Personal Emacs auto-save root.")

(if (not (file-exists-p chdka-emacs-const-autosave-rootdir))
    (make-directory chdka-emacs-const-autosave-rootdir t))
(setq-default auto-save-file-name-transforms 
              `((".*" ,(file-name-as-directory chdka-emacs-const-autosave-rootdir) t)))

#+end_src


**** Set the housekeeping for backup and auto-save            :@behaviour:
For the backup activate some setting regarding version and age of those versions

#+begin_src emacs-lisp
(setq-default make-backup-files t    ; backup of a file the first time it is saved
              backup-by-copying t
              version-control t      ; version numbers for backup files
              delete-old-versions t  ; delete old versions silently
              delete-by-moving-to-trash t
              kept-old-versions 6    ; oldest version to keep
              kept-new-versions 9    ; newest version to keep
)
#+end_src


Set the intervals for writing an auto-save file and the timeout.

#+begin_src emacs-lisp
(setq-default auto-save-default t    ; auto-save every buffer that visits a file
              auto-save-timeout 20   ; number of seconds idle time before auto-save
              auto-save-interval 200 ; number of keystrokes between auto-saves
) 
#+end_src


*** Buffer settings
**** Auto revert of the buffer                                :@behaviour:
This settings change the behaviour of Emacs when a file is changed

#+begin_src emacs-lisp
(global-auto-revert-mode 1)                   ; auto update buffer if a file changes
(add-hook 'dired-mode-hook 'auto-revert-mode) ; auto refresh dired when file changes
#+end_src

**** Encoding for saving buffer                               :@behaviour:
Write the files in UTF-8 and even in UTF-8-UNIX when possible

See reference: https://stackoverflow.com/questions/1674481/how-to-configure-gnu-emacs-to-write-unix-or-dos-formatted-files-by-default

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix)
(setq-default locale-coding-system 'utf-8
              buffer-file-coding-system 'utf-8-unix
	      default-buffer-file-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8-unix)
(when (eq system-type 'windows-nt)
  (set-clipboard-coding-system 'utf-16le-dos))
#+end_src

**** Performance issues on Windows when pasting unicode text  :@behaviour:
Sometime when you paste unicode text in Emacs it responds very slow

#+begin_src emacs-lisp
;; https://www.reddit.com/r/emacs/comments/8v4v7o/why_is_emacs_so_slow_on_windows/
;; sometime with pasting unicode text emacs responds very slow.
;; https://emacs.stackexchange.com/questions/33510/unicode-txt-slowness
(when (eq system-type 'windows-nt)
  (setq inhibit-compacting-font-caches t))
#+end_src

**** Show line and column number in the buffer                       :@ui:
Activate the line-numbers and columns in the buffer

#+begin_src emacs-lisp
(setq-default line-number-mode t
              column-number-mode t
              scroll-conservatively 1000
              ring-bell-function 'ignore
              visible-bell 1)
#+end_src


**** Set the tabs                                         :@behaviour:@ui:
Tabs in the buffer

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-with 4
              require-final-newline t)
#+end_src

**** Enable syntax highlighting for all buffers                      :@ui:

#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

**** Show matching parentheses                                       :@ui:

#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

**** Set a visual indicator if there is a newline or not             :@ui:

#+begin_src emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src


*** User Interface
In this section default settings for the user interface

**** Set the base fonts                                              :@ui:
 
#+begin_src emacs-lisp :tangle yes 

(defvar chdka-emacs--font-height (if (> (x-display-pixel-width) 1920)
                                     (+ 0 110)
                                   (+ 0 90))
   "This variable holds the font height, which is based on my display width and pixelcount")

;; Main typeface
(set-face-attribute 'default nil :family "Fantasque Sans Mono" :height chdka-emacs--font-height)
;; Proportionately spaced typeface
(set-face-attribute 'variable-pitch nil :family "Georgia" :height 1.0)
;; Monospaced typeface
(set-face-attribute 'fixed-pitch nil :family "Fantasque Sans Mono" :height 1.0)
#+end_src


**** A more useful frame title, display filename                     :@ui:
Display the filename of the active buffer in the frame title.

#+begin_src emacs-lisp
(setq-default frame-title-format
	      '((:eval (if (buffer-file-name)
			   (abbreviate-file-name (buffer-file-name))
			 "%b"))))
#+end_src

**** Frame settings for cursor                                       :@ui:
Settings for the cursor.

#+begin_src emacs-lisp
(blink-cursor-mode 1) ; -1 = disabled
#+end_src


**** DISABLED Settings for the menu-bar, tool-bar and scroll-bar     :@ui:
Settings for the tool-bar, menu-bar and scroll-bar are already set in my [[file:early-init.el][early-init.el]].
Therefore this code block is not tangled.

#+begin_src emacs-lisp
(tool-bar-mode -1)  ; -1 = disabled
(menu-bar-mode  1)  ;  1 = enabled
(scroll-bar-mode -1) ;  1 = enabled
#+end_src


**** DISABLED Maximise the initial frame                             :@ui:
When starting Emacs I'll always maximise the frame (Window)

[[https://emacsredux.com/blog/2020/12/04/maximize-the-emacs-frame-on-startup/]]

This is added to my [[file:early-init.el][early-init.el]]. It did not work correctly on MS Windows.
For windows I've to add -mm as parameter to the shortcut for runemacs.exe.
The emacsclienttw it does not work.

#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximised))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


**** Highlight current line                                          :@ui:
Make the currentline stand out more

#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src


** Per package
*** Org-mode
**** Install =org-plus-contrib=

#+begin_src emacs-lisp
(straight-use-package 'org-plus-contrib)
#+end_src

**** Org-mode default settings                                :@behaviour:
Set the folder for my org files, and prevent editing text which is not visible.

#+begin_src emacs-lisp
(setq org-directory chdka-emacs--env-emacs-home-org
      org-catch-invisible-edits 'error           ; prevent editing invisible text
      org-use-fast-todo-selection t
      org-treat-S-cursor-todo-selection-as-state-change nil
      )
#+end_src


**** TODO keywords and state triggers                         :@behaviour:

#+begin_src emacs-lisp
;; sequence for Final Version Perfected (FVP) variant
;; contains some old sequences (complete words e.g. TODO NEXT ...
;; meaning of my symbols:
;;     .T. : TODO
;;     .I. : INTERRUPT, urgent
;;     .P. : PROGRESS, working on
;;     .N. : NEXT
;;     .W. : WAITING
;;     .D. : DONE
;;     .C. : CANCELLED
;;     >>> : SCHEDULED MEETING :deprecated
;;     >S> : SCHEDULED MEETING
;;     <<< : VISITED MEETING   :deprecated
;;     <V< : VISITED MEETING
;;     >C< : CANCELLED MEETING

(setq org-todo-keywords
      (quote ((sequence ".T.(t!)" ".I.(i!)" ".P.(p@/!)" ".N.(n!)" ".W.(w@/!)" "|" ".D.(d)" ".C.(c)" )
              (sequence ">S>(s@/!)" " >>>(>@/!)" "|" "<V<(v)" ">C<(x)" "<<<" )
              )
             )
      )

(setq org-todo-state-tags-triggers
      (quote ((".T." ("dot") ("waiting") ("meeting"))
              (".I." ("dot") ("waiting") ("urgent" .t) ("meeting"))
              (".P." ("dot") ("waiting") ("progress" .t) ("meeting"))
              (".N." ("dot" . t) ("waiting") ("meeting"))
              (".W." ("dot") ("progress") ("urgent") ("waiting" .t))
              (">>>" ("dot") ("meeting" .t) ("visited" ))
              (done ("waiting") ("hold"))
              (".D."  ("dot") ("waiting") ("meeting"))
              ("<<<"  ("dot") ("meeting") ("visited"  .t))
              )
             )
      ) 
#+end_src

**** Logging of state changes                                 :@behaviour:
Activate logging of state changes.

#+begin_src emacs-lisp
(setq org-log-into-drawer t)
(setq org-log-done (quote note))
(setq org-log-reschedule (quote note))
(setq org-log-redeadline (quote note))
(setq org-log-delschedule (quote note))
(setq org-log-deldeadline (quote note))
(setq org-log-state-notes-insert-after-drawers nil)

;; Setup log note templates. Add "to [new date]" in reschedule and redeadline
(setq org-log-note-headings '((done        . "CLOSING NOTE %t")
                              (state       . "State %-12s from %-12S %t")
                              (note        . "Note taken on %t")
                              (reschedule  . "Schedule changed on %t: %S -> %s")
                              (delschedule . "Not scheduled, was %S on %t")
                              (redeadline  . "Deadline changed on %t: %S -> %s")
                              (deldeadline . "Removed deadline, was %S on %t")
                              (refile      . "Refiled on %t")
                              )
      )
#+end_src

**** Org-agenda

***** Define an agenda view                                    :@ui:hook:
Initialize my agenda view, this is my daily worklist

#+begin_src emacs-lisp
(setq calendar-week-start-day     1       ; monday is 1st day of week
      org-agenda-start-on-weekday nil     ; 
      org-agenda-span             4       ; show 4 days
      org-agenda-start-day      "-0d"
      ;; disable follow mode, use F in agenda view to follow
      org-agenda-start-with-follow-mode nil
      ;; do not show items with active date in global todo list
      ;;  active date are between < and >
      ;;  scheduled, deadline
      org-agenda-todo-ignore-with-date nil)

(setq org-agenda-custom-commands 
      '(("n" "Agenda / .I. / .P. / .N. / .W."
         ((agenda "" nil)
          (todo ".I." nil)
          (todo ".P." nil)
          (todo ".N." nil)
          (todo ".W." nil)
          (todo ".T." nil))
          nil)))

;; disable visual line wrap for agenda buffer only
(add-hook 'org-agenda-mode-hook (lambda ()
                                  (visual-line-mode -1)
                                  (toggle-truncate-lines 1)))
#+end_src

***** Add files to the agenda                                :@behaviour:

Create an empty list, if it does not exist, add-to-list failes

#+begin_src emacs-lisp
(setq org-agenda-files '()) ; empty the list
#+end_src



***** Work related:                           :@behaviour:

Add work related files
#+begin_src emacs-lisp
(when (not chdka-emacs--const-is-own-device)
  (add-to-list 'org-agenda-files (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")))
  (add-to-list 'org-agenda-files (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/refile.org")))
  (add-to-list 'org-agenda-files (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/GED-work.org"))))
#+end_src


I've made this very simple addon on MS Outlook to 'sync' my agenda with Org-agenda.
This is only active on my work machine

#+begin_src emacs-lisp
(when (not chdka-emacs--const-is-own-device)
   (when (file-exists-p (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/Ol2Om-agda.org")))
      (add-to-list 'org-agenda-files (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/Ol2Om-agda.org"))))
   (when (file-exists-p (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/Ol2Om-tsks.org")))
      (add-to-list 'org-agenda-files (expand-file-name (concat chdka-emacs--env-emacs-home-org "/WA/Ol2Om-tsks.org"))))
  )
#+end_src


**** Org-capture and Org-Protocol
I use org-capture and org-protocol at work for capturing information from
ticket system, which is TopDesk. It is also useful for capturing information
of websites.

***** Activate =org-protocol=                                :@behaviour:

#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

****** MS Windows - additional configuration
On Windows we have to register this protocol handler

#+begin_example
Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:org-protocol"
"URL Protocol"=""

[HKEY_CLASSES_ROOT\org-protocol\shell]

[HKEY_CLASSES_ROOT\org-protocol\shell\open]

[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"D:\\MSYS2-64\\mingw64\\bin\\emacsclientw.exe\" \"%1\""
#+end_example

***** Configure =org-capture=                                :@behaviour:
Add the files to the targets for refiling

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 4)
                           (org-agenda-files :maxlevel . 4))
      )

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm) 
#+end_src


****** Firefox and MS Edge - install addon =Org Capture=
This addons call the org-capture via org-protocol
http://orgmode.org/worg/org-contrib/org-protocol.html

In my configuration on Firefox and MS Edge the key is.

=CTRL+SHIFT+L=
and
=CTRL+SHIFT+p=

And activate the new style links, otherwise org-protocol complains about deprecated call.

***** Templates for =org-capture=                            :@behaviour:

#+begin_src emacs-lisp
;;; https://github.com/sprig/org-capture-extension

(defun chdka-emacs--square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat 
  (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
  )


(setq org-capture-templates
      (quote (("t" "todo" entry (file+headline
                                 (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Niet Tijdgebonden")
               "* .T. %?\n") ; <-- add to my lisf of todo
              ("i" "interrupt, urgent" entry (file+headline
                                 (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Niet Tijdgebonden")
               "* .I. %?\n") ; <-- add to my lisf of todo
              ("n" "next" entry (file+headline
                                 (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Niet Tijdgebonden")
               "* .N. %?\n") ; <-- add to my list of todo, and start immediately
              ("m" "meeting" entry (file+headline
                                    (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Tijdgebonden")
               "* >>> %?\n %^t") ; <-- add to my list of meetings.
              
              ; https://github.com/sprig/org-capture-extension
              ("p" "protocol" entry (file+headline
                                     (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Refile")
               "* .T. %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?") ; <-- add from firefox to list
              ("L" "protocol link" entry (file+headline
                                     (lambda () (concat chdka-emacs--env-emacs-home-org "/WA/GED.org")) "Refile")
               "* .T. %?%(chdka-emacs--square-brackets-to-round-ones \"%:description\") \n\nCaptured On: %U\n\nAantekeningen: \n")
              )
             )
      )
#+end_src


**** Org-mode =hooks=                                               :hook:

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode 1)
(add-hook 'org-mode-hook #'org-indent-mode)

;; removed this hook, it doesn't work correctly with org-roam
;;
;;(require 'org-id)
;;
;;(defun chdka-org-ids-to-headlines-in-file ()
;;  "Add ID properties to all headlines in the current file which do not already have one."
;;  (interactive)
;;  (org-map-entries 'org-id-get-create))
;;
;;(add-hook 'org-mode-hook (lambda ()
;;                           (add-hook 'before-save-hook
;;                                     'chdka-org-ids-to-headlines-in-file nil
;;                                     'local)
;;                           )
;;          )
;;(add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
#+end_src

**** Org-mode =key mappings=                                  :keymapping:
Set used key mappings for Org-mode, but are globally available

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)
(global-set-key (kbd "C-c '") 'org-edit-src-code)
(global-set-key (kbd "C-c i") 'org-id-copy) 
#+end_src

*** Ivy - completion framework                                 :@behaviour:
Install Ivy a completion framework

#+begin_src emacs-lisp
(use-package ivy
  :straight t
  :demand
  :config
  ;; add recent files to the switch-buffer
  ;; current and total # in prompt
  (setq ivy-use-virtual-buffers t
        ivy-count-format "[%d/%d] ")
  
  ;; enable ivy-mode
  (ivy-mode 1)
  )   
#+end_src


*** Which key                                                  :@behaviour:
Install which-key, this packages provides a completion for the key chords.
Helpful when you forget wich key comes next.

#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :demand t
  :config
  (which-key-mode)
  )
#+end_src


*** Markdown mode
Install markdown mode of jblevins. https://jblevins.org/projects/markdown-mode/

gfm-mode : Git Flavoured Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :demand t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  )
#+end_src

*** Magit
Install magit, there was an issue in the past so i had to install it from MELPA.
This seems resolved.

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-x g" . magit-status)
)
#+end_src


*** Modus themes                                                      :@ui:
Install the modus themes of https://protesilaos.com/

#+begin_src emacs-lisp
  (use-package modus-themes
    :straight t
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-intense-hl-line t)

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))

#+end_src


*** Deft 
Install deft a fork of https://github.com/jrblevin/deft

See also: https://jingsi.space/post/2017/04/05/organizing-a-complex-directory-for-emacs-org-mode-and-deft/


My default extension is =md= because I integrate this with *1Writer* on iOS.
For my work situation my default extension is =org=, and ignore the =txt= extension.
I've a lot large TXT files due to exports.

Scan even the subdirectories of the deft folder.

Due to redesign of my structure, the deft folder is =chdka-emacs--env-emacs-home-org=.
Each subdirectory directly under this folder has its own repository, and is managed that way.


#+begin_src emacs-lisp
  (use-package deft
    :straight (:type git :host github :repo "chdka/deft")
    :bind (("<f8>" . deft)
           ("C-x C-g" . deft-find-file))
    :commands (deft)
    :config
     (if chdka-emacs--const-is-own-device
                ; it is my own device
                (setq deft-extensions '("md" "txt" "org")
                      deft-default-extension "md") ; workaround, the default extension is not set properly
              ; it is my work device
              (setq deft-extensions '("md" "org")
                    deft-default-extension "org"))
            (setq deft-directory  (expand-file-name chdka-emacs--env-emacs-home-org)
                  deft-new-file-format "%Y%m%d-%H%M"
                  deft-recursive t
                  )
          (setq deft-auto-save-interval 10.0)
          (require 'chdka-deft-plus)
          (advice-add 'deft-parse-title :around #'chdka-deft/parse-title-with-directory-prepended)
      )

#+end_src


*** Elfeed - RSS feed reader in Emacs

**** Elfeed =key-mappings=                                    :keymapping:

#+begin_src emacs-lisp
(global-set-key (kbd "<f9>") 'elfeed)
#+end_src


**** Install elfeed-org
With this package it is possible to organise the feeds in an org-mode file.
Important is the =:elfeed:= tag for the first top heading, otherwise the file is not read by elfeed.

#+begin_example
/* Blogs                                                              :elfeed:
/** Software Development                                                 :dev:
/*** Emacs                                                    :emacs:mustread:
/**** http://nullprogram.com/feed
/**** http://planet.emacsen.org/atom.xml
#+end_example


#+begin_src emacs-lisp
  (use-package elfeed-org
   :straight (:type git :host github :repo "chdka/elfeed-org")
   :config
     (elfeed-org)
     (setq rmh-elfeed-org-files '()) ; empty the list
     (when (file-exists-p (expand-file-name "CP/09-elfeed-76.org" chdka-emacs--env-emacs-home-org))
        (add-to-list 'rmh-elfeed-org-files (expand-file-name "CP/09-elfeed-76.org" chdka-emacs--env-emacs-home-org)))
     (when (file-exists-p (expand-file-name "WN/09-elfeed-w.org" chdka-emacs--env-emacs-home-org))
        (add-to-list 'rmh-elfeed-org-files (expand-file-name "WN/09-elfeed-w.org" chdka-emacs--env-emacs-home-org))))
#+end_src


**** Install package =elfeed=
This is the elfeed RSS reader of skeeto

#+begin_src emacs-lisp
  (use-package elfeed
   :straight t
   :bind (:map elfeed-search-mode-map)
  )
#+end_src

